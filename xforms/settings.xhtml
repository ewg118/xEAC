<html xmlns="http://www.w3.org/1999/xhtml" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xs="http://www.w3.org/2001/XMLSchema"
	xmlns:ev="http://www.w3.org/2001/xml-events" xmlns:xxforms="http://orbeon.org/oxf/xml/xforms" xmlns:xi="http://www.w3.org/2001/XInclude"
	xmlns:fr="http://orbeon.org/oxf/xml/form-runner" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xxi="http://orbeon.org/oxf/xml/xinclude"
	xmlns:eac="urn:isbn:1-931666-33-4" xmlns:oxf="http://www.orbeon.com/oxf/processors" xmlns:exist="http://exist.sourceforge.net/NS/exist"
	xmlns:xeac="https://github.com/ewg118/xEAC" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
	xmlns:owl="http://www.w3.org/2002/07/owl#">
	<head>
		<title>xEAC Application Settings</title>
		<link rel="stylesheet" href="/fr/style/bootstrap/css/bootstrap.css" type="text/css" />
		<link rel="stylesheet" href="/fr/style/form-runner-bootstrap-override.css" type="text/css" />

		<link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" />
		<script type="text/javascript" src="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>
		<link rel="shortcut icon" href="/ops/images/orbeon-icon-16.ico" />
		<link rel="icon" href="/ops/images/orbeon-icon-16.png" type="image/png" />
		<link rel="stylesheet" type="text/css" href="/apps/xeac/xforms/css/xforms.css" />

		<xforms:model>
			<xforms:instance id="config" xxforms:exclude-result-prefixes="#all">
				<config></config>
			</xforms:instance>

			<xforms:instance id="exist-config" xxforms:exclude-result-prefixes="#all">
				<xi:include href="../exist-config.xml"/>
			</xforms:instance>

			<xforms:instance id="control-instance">
				<control xmlns="">
					<id></id>
					<api-key-accepted></api-key-accepted>
					<save-trigger></save-trigger>
					<collection-name></collection-name>
					<error></error>
					<simple-upload-trigger></simple-upload-trigger>
					<connect-trigger></connect-trigger>
					<sparql>
						<update></update>
						<query></query>
						<store></store>
					</sparql>
					<sparql-success>false</sparql-success>
					<sparql-connect>false</sparql-connect>
					<sparql-query-test>ASK WHERE {?s ?p ?o}</sparql-query-test>
					<status></status>
				</control>
			</xforms:instance>

			<xforms:instance id="agencyName-template">
				<item xmlns=""></item>
			</xforms:instance>

			<xforms:instance id="cpfRelation-template" xxforms:exclude-result-prefixes="#all">
				<relation from="" to="" domain="" range="" xmlns=""></relation>
			</xforms:instance>

			<xforms:instance id="resourceRelation-template" xxforms:exclude-result-prefixes="#all">
				<relation from="" to="" xmlns=""></relation>
			</xforms:instance>

			<xforms:instance id="localTypeDeclaration-template" xxforms:exclude-result-prefixes="#all">
				<localTypeDeclaration xmlns="">
					<abbreviation></abbreviation>
					<citation role="semantic" type="simple" href=""></citation>
				</localTypeDeclaration>
			</xforms:instance>

			<xforms:instance id="descriptiveNote-template" xxforms:exclude-result-prefixes="#all">
				<descriptiveNote>
					<p></p>
				</descriptiveNote>
			</xforms:instance>

			<!-- xquery -->
			<xforms:instance id="eXist-xquery">
				<exist:query xmlns="">
					<exist:text/>
				</exist:query>
			</xforms:instance>

			<xforms:instance id="xqueries">
				<queries xmlns="">
					<query id="gather-cpfRelations">declare namespace eac="urn:isbn:1-931666-33-4"; &lt;report> { for $arcrole in
						distinct-values(collection()//eac:cpfRelation/@xlink:arcrole) order by $arcrole return &lt;relation> { $arcrole } &lt;/relation> }
						&lt;/report> </query>
					<query id="gather-resourceRelations">declare namespace eac="urn:isbn:1-931666-33-4"; &lt;report> { for $arcrole in
						distinct-values(collection()//eac:resourceRelation/@xlink:arcrole) order by $arcrole return &lt;relation> { $arcrole } &lt;/relation> }
						&lt;/report> </query>
					<query id="publish-all">&lt;report> { for $foo in collection()[descendant::*:publicationStatus='approved'] return &lt;id> {
						$foo//*:recordId/text() } &lt;/id> } &lt;/report></query>
				</queries>
			</xforms:instance>

			<xforms:instance id="xquery-result">
				<exist:result/>
			</xforms:instance>

			<!-- lists -->
			<xforms:instance id="cpfRelations-list" xxforms:exclude-result-prefixes="#all">
				<relations xmlns=""></relations>
			</xforms:instance>
			<xforms:instance id="resourceRelations-list" xxforms:exclude-result-prefixes="#all">
				<relations xmlns=""></relations>
			</xforms:instance>

			<!-- upload relationship ontology -->
			<xforms:instance id="file">
				<!-- Start with placeholders for three files -->
				<file xmlns="" xsi:type="xs:anyURI" filename="" mediatype="" size=""></file>
			</xforms:instance>

			<xforms:instance id="ontology">
				<rdf:RDF xmlns=""/>
			</xforms:instance>

			<xforms:instance id="load-rdf-config">
				<config xmlns="">
					<url></url>
					<content-type>application/xml</content-type>
					<mode>xml</mode>
				</config>
			</xforms:instance>

			<!-- ***** SNAC Instances ***** -->
			<xforms:instance id="snac-response" xxforms:exclude-result-prefixes="#all">
				<json type="object" xmlns=""></json>
			</xforms:instance>

			<!-- the SNAC query is XML that must conform to the XForms 2.0 JSON model for serialization into application/json -->
			<xforms:instance id="snac-query" xxforms:exclude-result-prefixes="#all">
				<json type="object" xmlns=""></json>
			</xforms:instance>

			<!-- connecting to a SPARQL endpoint -->
			<xforms:instance id="sparql-response">
				<sparql xmlns="http://www.w3.org/2005/sparql-results#"/>
			</xforms:instance>

			<!-- publish records to SPARQL endpoint -->
			<xforms:instance id="solr-response" xxforms:exclude-result-prefixes="#all">
				<response></response>
			</xforms:instance>

			<xforms:instance id="rdf" xxforms:exclude-result-prefixes="#all">
				<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/>
			</xforms:instance>

			<xforms:instance id="rdf-test" xxforms:exclude-result-prefixes="#all">
				<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
					<rdf:Description rdf:about="http://example.org/">
						<rdf:type rdf:resource="http://xmlns.com/foaf/0.1/Organization"/>
					</rdf:Description>
				</rdf:RDF>
			</xforms:instance>

			<xforms:instance id="sparqlUpdate-template">
				<query>
					<![CDATA[DELETE {?s ?p ?o} WHERE { <URI> ?p ?o . ?s ?p ?o . FILTER (?s = <URI>) }]]>
				</query>
			</xforms:instance>

			<xforms:instance id="sparqlUpdate">
				<query></query>
			</xforms:instance>

			<!-- ************ BINDINGS *************** -->
			<xforms:bind nodeset="instance('config')">
				<xforms:bind nodeset="title" required="true()"/>
				<xforms:bind nodeset="url" required="true()" type="xs:anyURI"/>
				<xforms:bind nodeset="uri_space" type="xs:anyURI"/>
				<xforms:bind nodeset="description" required="true()"/>
				<xforms:bind nodeset="solr_published" required="true()" type="xs:anyURI"/>
				<xforms:bind nodeset="sparql">
					<xforms:bind nodeset="query" type="xs:anyURI"/>
					<xforms:bind nodeset="store" type="xs:anyURI"/>
					<xforms:bind nodeset="update" type="xs:anyURI"/>
					<xforms:bind nodeset="endpoint" type="xs:boolean"/>
				</xforms:bind>
				<xforms:bind nodeset="snac">
					<xforms:bind nodeset="repository_ark" id="ark"
						constraint="if (string-length(.) &gt; 0) then matches(., '^http://n2t\.net/ark:/99166/[a-z0-9]+$') else true()"/>
				</xforms:bind>
				<xforms:bind nodeset="instances/agencyName-list">
					<xforms:bind nodeset="item" required="true()"/>
				</xforms:bind>
				<xforms:bind nodeset="images">
					<xforms:bind nodeset="thumbnail" required="true()" type="xs:integer"/>
					<xforms:bind nodeset="reference" required="true()" type="xs:integer"/>
				</xforms:bind>
				<xforms:bind nodeset="relationSemantics">
					<xforms:bind nodeset="descendant::relation">
						<xforms:bind nodeset="@from" required="true()"
							constraint="if (contains(., ':')) then substring-before(., ':') = instance('config')//abbreviation else string-length(.) &gt; 0"/>
						<xforms:bind nodeset="@to" required="true()"/>
						<xforms:bind nodeset="@domain" required="true()"/>
						<xforms:bind nodeset="@range" required="true()"/>
					</xforms:bind>
				</xforms:bind>
				<xforms:bind nodeset="localTypeDeclarations">
					<xforms:bind nodeset="localTypeDeclaration">
						<xforms:bind nodeset="abbreviation" required="true()" type="xs:ID"/>
						<xforms:bind nodeset="citation">
							<xforms:bind nodeset="@href" required="true()" type="xs:anyURI"/>
						</xforms:bind>
					</xforms:bind>
				</xforms:bind>
			</xforms:bind>

			<xforms:bind nodeset="instance('control-instance')">
				<xforms:bind nodeset="namespace">
					<xforms:bind nodeset="@prefix" type="xs:ID" readonly="not(parent::node()/@import=true())"/>
					<xforms:bind nodeset="@import" type="xs:boolean"/>
				</xforms:bind>
				<xforms:bind nodeset="sparql-success" type="xs:boolean"/>
				<xforms:bind nodeset="sparql-connect" type="xs:boolean"/>
				<xforms:bind nodeset="sparql">
					<xforms:bind nodeset="query" as="xs:anyURI"/>
					<xforms:bind nodeset="store" as="xs:anyURI"/>
					<xforms:bind nodeset="update" as="xs:anyURI"/>
				</xforms:bind>
			</xforms:bind>

			<xforms:bind id="sparql-connect" nodeset="instance('control-instance')/connect-trigger"
				readonly="string-length(../sparql/query) = 0 or string-length(../sparql/update) = 0 or string-length(../sparql/store) = 0"/>

			<!-- tabs -->
			<xforms:bind id="settings-tab" nodeset="instance('config')"/>
			<xforms:bind id="relations-tab" nodeset="instance('config')"/>
			<xforms:bind id="advanced-tab" nodeset="instance('config')"/>

			<!-- ****************** SUBMISSIONS ***************** -->
			<!-- Load File -->
			<xforms:submission id="load-config" serialization="none" method="get" action="{instance('exist-config')/url}xeac/config.xml"
				xxforms:username="{instance('exist-config')/username}" xxforms:password="{instance('exist-config')/password}" replace="instance"
				instance="config">
				<xforms:message ev:event="xforms-submit-error" level="modal">Unable to load configuration file</xforms:message>
			</xforms:submission>

			<!-- Save File -->
			<xforms:submission id="save-config" ref="instance('config')" xxforms:username="{instance('exist-config')/username}"
				xxforms:password="{instance('exist-config')/password}" action="{instance('exist-config')/url}xeac/config.xml" method="put" replace="none">
				<xforms:setvalue ev:event="xforms-submit-done" ref="instance('control-instance')/status">Configuration saved.</xforms:setvalue>
				<xforms:message ev:event="xforms-submit-error" level="modal">Error saving configuration file.</xforms:message>
			</xforms:submission>

			<xforms:submission id="xquery-collection" ref="instance('eXist-xquery')" action="{instance('exist-config')/url}xeac/records" method="post"
				replace="instance" instance="xquery-result" xxforms:username="{instance('exist-config')/username}"
				xxforms:password="{instance('exist-config')/password}">
				<xforms:setvalue ref="instance('control-instance')/error" ev:event="xforms-submit-error">Error querying eXist database.</xforms:setvalue>
			</xforms:submission>

			<!-- upload file -->
			<xforms:submission id="upload-ontology" method="post" replace="none" resource="test:" ref="instance('control-instance')/simple-upload-trigger">
				<xforms:message ev:event="xforms-submit-error" level="modal">Upload to temporary directory failed.</xforms:message>
			</xforms:submission>

			<!--<xforms:submission id="get-ontology" method="get" replace="instance" instance="ontology" serialization="none" action="{substring-before(instance('file'), '?')}" mediatype="application/rdf+xml">
				<xforms:message ev:event="xforms-submit-error" level="modal">Unable to load file into an XForms instance. Is it an XML document?</xforms:message>
			</xforms:submission>-->

			<!-- query SPARQL endpoint -->
			<xforms:submission id="query-sparql" serialization="none" method="get"
				action="{instance('control-instance')/sparql/query}?query={encode-for-uri(instance('control-instance')/sparql-query-test)}" replace="instance"
				instance="sparql-response">
				<xforms:header>
					<xforms:name>Accept</xforms:name>
					<xforms:value>application/sparql-results+xml</xforms:value>
				</xforms:header>
				<xforms:setvalue ev:event="xforms-submit-done" ref="instance('control-instance')/sparql-success">false</xforms:setvalue>
			</xforms:submission>

			<xforms:submission id="get-rdf" method="get" replace="instance" instance="rdf" serialization="none"
				resource="/xeac/id/{instance('control-instance')/id}.rdf">
				<xforms:message ev:event="xforms-submit-error" level="modal">Unable to get RDF/XML serialization.</xforms:message>
				<xforms:action ev:event="xforms-submit-done">
					<!-- first remove existing graphs -->
					<xforms:action xxforms:iterate="instance('rdf')//@rdf:about">
						<xforms:var name="uri" select="."/>
						<xforms:setvalue ref="instance('sparqlUpdate')" value="replace(instance('sparqlUpdate-template'), 'URI', $uri)"/>
						<xforms:send submission="delete-graph"/>
					</xforms:action>
					<!-- then post RDF -->
					<xforms:send submission="post-rdf"/>
				</xforms:action>
			</xforms:submission>

			<xforms:submission id="post-rdf" action="{instance('control-instance')/sparql/store}?default" ref="instance('rdf')" replace="none" method="post"
				mediatype="application/rdf+xml">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:setvalue ref="instance('control-instance')/sparql-success">false</xforms:setvalue>
					<xforms:message level="modal">Post to endpoint failed.</xforms:message>
				</xforms:action>
			</xforms:submission>

			<xforms:submission id="delete-graph" action="{instance('control-instance')/sparql/update}" ref="instance('sparqlUpdate')" serialization="text/plain"
				replace="none" method="post" mediatype="application/sparql-update">
				<xforms:action ev:event="xforms-submit-error">
					<xforms:setvalue ref="instance('control-instance')/sparql-success">false</xforms:setvalue>
					<xforms:message level="modal">SPARQL update failed.</xforms:message>
				</xforms:action>
			</xforms:submission>

			<!-- Read the SNAC ARK and get the constellation ID -->
			<!-- SNAC API -->
			<xforms:submission id="query-snac" ref="instance('snac-query')" action="{instance('config')/snac/api}" method="put" replace="instance"
				instance="snac-response" serialization="application/json">
				<xforms:header>
					<xforms:name>User-Agent</xforms:name>
					<xforms:value>XForms/xEAC</xforms:value>
				</xforms:header>
				<xforms:message ev:event="xforms-submit-error" level="modal">
					<xforms:output ref="event('response-body')"/>
				</xforms:message>
			</xforms:submission>

			<!-- ********* XFORMS-MODEL-CONSTRUCT-DONE *********** -->
			<xforms:action ev:event="xforms-model-construct-done">
				<xforms:send submission="load-config"/>
			</xforms:action>
		</xforms:model>

		<!--<xi:include href="xbl/descriptiveNote/descriptiveNote.xbl" xi:omit-xml-base="true"/>-->
	</head>
	<body>
		<div class="container-fluid">
			<div class="row">
				<div class="col-md-12">
					<div id="form">
						<h1>Edit Settings</h1>
						<p><a href="../"><span class="glyphicon glyphicon-arrow-left"></span>Return to Admin</a></p>

						<xforms:group ref=".[string(instance('control-instance')/status)]">
							<div class="alert alert-box alert-success">
								<span class="glyphicon glyphicon-info-sign"></span>
								<strong>Status:</strong>
								<xforms:output ref="instance('control-instance')/status"/>
							</div>
						</xforms:group>

						<div class="submission">
							<xforms:trigger appareance="minimal">
								<xforms:label><span class="glyphicon glyphicon-floppy-disk"></span>Save</xforms:label>
								<xforms:send ev:event="DOMActivate" submission="save-config"/>
							</xforms:trigger>
						</div>
						<fr:tabview>
							<fr:tab bind="settings-tab">
								<fr:label>Settings</fr:label>
								<h2>Primary Settings</h2>
								<div class="section">
									<h3>Titles and URLs</h3>
									<div>
										<xforms:input ref="title">
											<xforms:label>Title</xforms:label>
											<xforms:alert>Required</xforms:alert>
										</xforms:input>
										<p>The title of the site to be displayed in all web page titles and citations in PDF files.</p>
									</div>
									<div>
										<xforms:input ref="description">
											<xforms:label>Description</xforms:label>
											<xforms:alert>Required</xforms:alert>
										</xforms:input>
										<p>Description provided in data dumps and used in index page jumbotron.</p>
									</div>
									<div>
										<xforms:input ref="url">
											<xforms:label>URL</xforms:label>
											<xforms:alert>Required</xforms:alert>
										</xforms:input>
										<p>Public URL of the site. Used in citations of and image references in PDF printouts. Changing this to an inactive URL
											will <b>not</b> break 's core functionality, but web forms may be style-less since the Orbeon applications point to
											this URL for embedding css files.</p>
									</div>
									<div>
										<xforms:input ref="uri_space">
											<xforms:label>URI Space</xforms:label>
										</xforms:input>
										<p>URI prefix for all EAC-CPF records in the collection, e.g., ARK URIs at a particular domain name. Note: this should
											be used in conjunction with Apache ProxyPass.</p>
									</div>
									<div>
										<xforms:textarea ref="google_analytics">
											<xforms:label>Google Analytics</xforms:label>
										</xforms:textarea>
										<p>Copy and paste the javascript code between <b>&lt;script type="text/javascript"&gt;&lt;/script&gt;</b> provided by
											Google.</p>
									</div>
								</div>
								<xforms:group ref="sparql">
									<div class="section">
										<h3>SPARQL</h3>
										<div>
											<xforms:group ref=".[not(string(query) and string(store) and string(update))]">
												<xforms:trigger>
													<xforms:label>Connect</xforms:label>
													<xforms:action ev:event="DOMActivate">
														<xxforms:show dialog="sparql-dialog"/>
													</xforms:action>
												</xforms:trigger>
											</xforms:group>
											<xforms:group ref=".[string(query) and string(store) and string(update)]">
												<xforms:trigger>
													<xforms:label>Clear</xforms:label>
													<xforms:action ev:event="DOMActivate">
														<xforms:setvalue ref="instance('control-instance')/sparql/query"/>
														<xforms:setvalue ref="instance('control-instance')/sparql/update"/>
														<xforms:setvalue ref="instance('control-instance')/sparql/store"/>
														<xforms:setvalue ref="instance('control-instance')/sparql-success">false</xforms:setvalue>
														<xforms:setvalue ref="update"/>
														<xforms:setvalue ref="query"/>
														<xforms:setvalue ref="store"/>
														<xforms:setvalue ref="endpoint">false</xforms:setvalue>
													</xforms:action>
												</xforms:trigger>
											</xforms:group>
										</div>
										<p>Connect xEAC to a SPARQL endpoint for more widespread dissemination and querying.</p>
										<xforms:group ref=".[string(query) and string(update) and string(store)]">
											<div>
												<xforms:input ref="endpoint">
													<xforms:label>Expose Endpoint</xforms:label>
													<xforms:alert>Invalid</xforms:alert>
												</xforms:input>
											</div>
											<div>
												<xforms:output ref="query">
													<xforms:label>Query Service</xforms:label>
												</xforms:output>
											</div>
											<div>
												<xforms:output ref="store">
													<xforms:label>Graph Store</xforms:label>
												</xforms:output>
											</div>
											<div>
												<xforms:output ref="update">
													<xforms:label>Update Service</xforms:label>
												</xforms:output>
											</div>
										</xforms:group>
									</div>
								</xforms:group>

								<!-- SNAC configuration -->
								<!-- if the SPARQL endpoint is enabled, then allow the user to enter an ARK URI for the repository -->
								<div class="section">
									<h2>SNAC Configuration</h2>
									<xforms:group ref="snac">
										<div>
											<xforms:select1 ref="api">
												<xforms:label>API</xforms:label>
												<xforms:item>
													<xforms:label>Development</xforms:label>
													<xforms:value>http://snac-dev.iath.virginia.edu/api/</xforms:value>
												</xforms:item>
												<xforms:item>
													<xforms:label>Production</xforms:label>
													<xforms:value>http://api.snaccooperative.org/</xforms:value>
												</xforms:item>
											</xforms:select1>
										</div>

										<xforms:group ref=".[../sparql[string(query) and string(update) and string(store)]]">
											<div>
												<xforms:input ref="repository_ark">
													<xforms:label>Repository ARK</xforms:label>
													<xforms:alert>Must be a SNAC ARK, if entered</xforms:alert>

													<!-- submit an API request to SNAC to get the constellation ID if a valid ARK URI has been entered -->
													<xforms:action ev:event="xforms-value-changed">
														<xforms:var name="ark" select="data(.)"/>

														<!-- evaluate validity of ARK -->
														<xforms:action if="matches(., '^http://n2t\.net/ark:/99166/[a-z0-9]+$')">
															<xforms:insert context="instance('snac-query')" origin="xforms:element('command', 'read')"/>
															<xforms:insert context="instance('snac-query')" origin="xforms:element('arkid', $ark)"/>
															<xforms:send submission="query-snac"/>

															<!-- set constellationid and set source (constellation preferred label) -->
															<xforms:action ev:event="xforms-submit-done">
																<xforms:action if="instance('snac-response')/constellation/id">
																	<xforms:setvalue ref="instance('config')/snac/repository_constellation_id"
																		value="instance('snac-response')/constellation/id"/>
																	<xforms:setvalue ref="instance('config')/snac/source"
																		value="instance('snac-response')/constellation/nameEntries/_[preferenceScore = '99']/original"
																	/>
																</xforms:action>
															</xforms:action>
														</xforms:action>

													</xforms:action>
												</xforms:input>
												<p>Insert a SNAC ARK, conforming to <code>http://n2t.net/ark:/99166/[a-z0-9]+</code>, for the repository
													responsible for publishing archival and bibliographic materials relating to the entity.</p>
											</div>
											<xforms:group ref=".[string(repository_constellation_id)]">
												<div>
													<xforms:output ref="source">
														<xforms:label>Preferred Label</xforms:label>
													</xforms:output>
													<p>The preferred label for the repository is used when inserting the local authority URI into a SNAC constellation.</p>
												</div>
												<div>
													<xforms:output ref="repository_constellation_id">
														<xforms:label>Constellation ID</xforms:label>
													</xforms:output>
													<p>The SNAC constellation ID for the repository, extracted from the API.</p>
												</div>
											</xforms:group>
										</xforms:group>
									</xforms:group>
								</div>



								<div class="section">
									<h2>API Keys</h2>
									<div>
										<h3>Geonames</h3>
										<div>
											<xforms:input ref="geonames_api_key" incremental="true">
												<xforms:label>Key</xforms:label>
											</xforms:input>
											<p>A <a href="http://www.geonames.org/export/web-services.html">geonames API key</a> is required in order to link
												geographical places to geonames ids.</p>
										</div>
									</div>
								</div>
								<div class="section">
									<xforms:group ref="instances/agencyName-list">
										<h2>Agency Names</h2>
										<xforms:trigger appearance="minimal">
											<xforms:label>
												<span class="glyphicon glyphicon-plus"></span>Agency</xforms:label>
											<xforms:insert ev:event="DOMActivate" context="." nodeset="./child::node()[last()]"
												origin="instance('agencyName-template')"/>
										</xforms:trigger>
										<xforms:repeat nodeset="item">
											<div>
												<xforms:input ref=".">
													<xforms:label>Agency <xforms:output value="if(@default='true') then '(default)' else ''"/>
													</xforms:label>
													<xforms:alert>Required</xforms:alert>
												</xforms:input>
												<xforms:group ref=".[not(@default='true')]">
													<xforms:trigger appearance="minimal">
														<xforms:delete ev:event="DOMActivate" nodeset="."/>
														<xforms:label>
															<span class="glyphicon glyphicon-remove"></span>
														</xforms:label>
													</xforms:trigger>
												</xforms:group>
											</div>
										</xforms:repeat>
									</xforms:group>
								</div>
							</fr:tab>
							<fr:tab bind="relations-tab">
								<fr:label>Semantic Relationships</fr:label>
								<div class="section">
									<h2>Semantic Relationships</h2>
									<xforms:group ref="relationSemantics/cpfRelations">
										<div class="subsection">
											<h3>CPF Relations</h3>
											<span class="add">
												<xforms:trigger appearance="minimal">
													<xforms:label><span class="glyphicon glyphicon-plus"></span>Import</xforms:label>
													<xforms:action ev:event="DOMActivate">
														<xforms:setvalue ref="instance('eXist-xquery')/exist:text"
															value="instance('xqueries')/query[@id='gather-cpfRelations']"/>
														<xforms:send submission="xquery-collection"/>
														<xforms:insert context="instance('cpfRelations-list')" origin="instance('xquery-result')//relation"/>
													</xforms:action>
												</xforms:trigger>
												<xforms:trigger appearance="minimal">
													<xforms:label><span class="glyphicon glyphicon-plus"></span>Upload RDF/XML Ontology</xforms:label>
													<xxforms:show ev:event="DOMActivate" dialog="upload-ontology-dialog"/>
												</xforms:trigger>
											</span>
											<xforms:group ref="instance('cpfRelations-list')[count(//relation) &gt; 0]">
												<div class="subsection">
													<h4>Available Relationships</h4>
													<p>The following semantic relationships are already employed in this EAC-CPF collection.</p>
													<xforms:repeat nodeset="relation">
														<xforms:var name="val" select="text()"/>
														<div>
															<xforms:output ref=".">
																<xforms:label>Relation</xforms:label>
															</xforms:output>
															<xforms:group ref=".[not(instance('config')/relationSemantics/cpfRelations/relation/@from = $val)]">
																<xforms:trigger appearance="minimal">
																	<xforms:label><span class="glyphicon glyphicon-plus"></span>Add</xforms:label>
																	<xforms:action ev:event="DOMActivate">
																		<xforms:insert context="instance('config')/relationSemantics/cpfRelations"
																			nodeset="./child::node()[last()]" origin="instance('cpfRelation-template')"/>
																		<xforms:setvalue
																			ref="instance('config')/relationSemantics/cpfRelations/relation[last()]/@from"
																			value="$val"/>
																	</xforms:action>
																</xforms:trigger>
															</xforms:group>
														</div>
													</xforms:repeat>
												</div>
											</xforms:group>
											<div>
												<h4>Controlled Template</h4>
												<span class="add">
													<xforms:trigger appearance="minimal">
														<xforms:label><span class="glyphicon glyphicon-plus"></span>Add New</xforms:label>
														<xforms:action ev:event="DOMActivate">
															<xforms:insert nodeset="./child::node()[last()]" origin="instance('cpfRelation-template')"/>
														</xforms:action>
													</xforms:trigger>
												</span>
												<xforms:group ref=".[count(relation) &gt; 0]">
													<table class="table">
														<thead>
															<tr>
																<th class="text-center">Relation</th>
																<th class="text-center">Inverse</th>
																<th class="text-center">Domain</th>
																<th class="text-center">Range</th>
																<th class="text-center">Delete</th>
															</tr>
														</thead>
														<tbody>
															<xforms:repeat nodeset="relation">
																<tr>
																	<td>
																		<xforms:input ref="@from">
																			<xforms:alert>Required</xforms:alert>
																			<xforms:action ev:event="xforms-value-changed">
																				<!-- insert localTypeDeclaration -->
																				<xforms:action
																				if="contains(., ':') and not(instance('config')//abbreviation = substring-before(., ':'))">
																				<xforms:var name="prefix" select="substring-before(., ':')"/>
																				<xforms:insert context="instance('config')/localTypeDeclarations"
																				nodeset="./child::node()[last()]"
																				origin="instance('localTypeDeclaration-template')"/>
																				<xforms:setvalue
																				ref="instance('config')/localTypeDeclarations/localTypeDeclaration[last()]/abbreviation"
																				value="$prefix"/>
																				</xforms:action>
																			</xforms:action>
																		</xforms:input>
																	</td>
																	<td>
																		<xforms:select1 ref="@to">
																			<xforms:itemset nodeset="instance('config')/relationSemantics/cpfRelations/relation">
																				<xforms:label ref="@from"/>
																				<xforms:value ref="@from"/>
																			</xforms:itemset>
																			<xforms:alert>Required</xforms:alert>
																		</xforms:select1>
																	</td>
																	<td>
																		<xforms:select1 ref="@domain">
																			<xforms:item>
																				<xforms:label>Select...</xforms:label>
																				<xforms:value/>
																			</xforms:item>
																			<xforms:item>
																				<xforms:label>Person</xforms:label>
																				<xforms:value>foaf:Person</xforms:value>
																			</xforms:item>
																			<xforms:item>
																				<xforms:label>Organization</xforms:label>
																				<xforms:value>org:Organization</xforms:value>
																			</xforms:item>
																			<xforms:item>
																				<xforms:label>Family</xforms:label>
																				<xforms:value>arch:Family</xforms:value>
																			</xforms:item>
																			<xforms:alert>Required</xforms:alert>
																		</xforms:select1>
																	</td>
																	<td>
																		<xforms:select1 ref="@range">
																			<xforms:item>
																				<xforms:label>Select...</xforms:label>
																				<xforms:value/>
																			</xforms:item>
																			<xforms:item>
																				<xforms:label>Person</xforms:label>
																				<xforms:value>foaf:Person</xforms:value>
																			</xforms:item>
																			<xforms:item>
																				<xforms:label>Organization</xforms:label>
																				<xforms:value>org:Organization</xforms:value>
																			</xforms:item>
																			<xforms:item>
																				<xforms:label>Family</xforms:label>
																				<xforms:value>arch:Family</xforms:value>
																			</xforms:item>
																			<xforms:alert>Required</xforms:alert>
																		</xforms:select1>
																	</td>
																	<td class="text-center">
																		<xforms:trigger appearance="minimal">
																			<xforms:delete ev:event="DOMActivate" nodeset="."/>
																			<xforms:label>
																				<span class="glyphicon glyphicon-remove"></span>
																			</xforms:label>
																		</xforms:trigger>
																	</td>
																</tr>
															</xforms:repeat>
														</tbody>
													</table>
												</xforms:group>
											</div>
										</div>
									</xforms:group>
									<xforms:group ref="relationSemantics/resourceRelations">
										<div class="subsection">
											<h3>Resource Relations</h3>
											<span class="add">
												<xforms:trigger appearance="minimal">
													<xforms:label><span class="glyphicon glyphicon-plus"></span>Import</xforms:label>
													<xforms:action ev:event="DOMActivate">
														<xforms:setvalue ref="instance('eXist-xquery')/exist:text"
															value="instance('xqueries')/query[@id='gather-resourceRelations']"/>
														<xforms:send submission="xquery-collection"/>
														<xforms:insert context="instance('resourceRelations-list')" origin="instance('xquery-result')//relation"
														/>
													</xforms:action>
												</xforms:trigger>
											</span>
											<xforms:group ref="instance('resourceRelations-list')[count(//relation) &gt; 0]">
												<div>
													<h4>Available Relationships</h4>
													<p>The following semantic relationships are already employed in this EAC-CPF collection.</p>
													<xforms:repeat nodeset="relation">
														<xforms:var name="val" select="text()"/>
														<div>
															<xforms:output ref=".">
																<xforms:label>Relation</xforms:label>
															</xforms:output>
															<xforms:group
																ref=".[not(instance('config')/relationSemantics/resourceRelations/relation/@from = $val)]">
																<xforms:trigger appearance="minimal">
																	<xforms:label><span class="glyphicon glyphicon-plus"></span>Add</xforms:label>
																	<xforms:action ev:event="DOMActivate">
																		<xforms:insert context="instance('config')/relationSemantics/resourceRelations"
																			nodeset="./child::node()[last()]" origin="instance('cpfRelation-template')"/>
																		<xforms:setvalue
																			ref="instance('config')/relationSemantics/resourceRelations/relation[last()]/@from"
																			value="$val"/>
																	</xforms:action>
																</xforms:trigger>
															</xforms:group>
														</div>
													</xforms:repeat>
												</div>
											</xforms:group>
											<div class="subsection">
												<h4>Controlled Template</h4>
												<span class="add">
													<xforms:trigger appearance="minimal">
														<xforms:label><span class="glyphicon glyphicon-plus"></span>Add New</xforms:label>
														<xforms:action ev:event="DOMActivate">
															<xforms:insert nodeset="./child::node()[last()]" origin="instance('cpfRelation-template')"/>
														</xforms:action>
													</xforms:trigger>
												</span>
												<xforms:group ref=".[count(relation) &gt; 0]">
													<table>
														<thead>
															<tr>
																<th>Relation</th>
																<th>Delete</th>
															</tr>
														</thead>
														<tbody>
															<xforms:repeat nodeset="relation">
																<tr>
																	<td>
																		<xforms:input ref=".">
																			<xforms:alert>Required</xforms:alert>
																			<xforms:action ev:event="xforms-value-changed">
																				<!-- insert localTypeDeclaration -->
																				<xforms:action
																				if="contains(., ':') and not(instance('config')//abbreviation = substring-before(., ':'))">
																				<xforms:var name="prefix" select="substring-before(., ':')"/>
																				<xforms:insert context="instance('config')/localTypeDeclarations"
																				nodeset="./child::node()[last()]"
																				origin="instance('localTypeDeclaration-template')"/>
																				<xforms:setvalue
																				ref="instance('config')/localTypeDeclarations/localTypeDeclaration[last()]/abbreviation"
																				value="$prefix"/>
																				</xforms:action>
																			</xforms:action>
																		</xforms:input>
																	</td>
																	<td>
																		<xforms:trigger appearance="minimal">
																			<xforms:delete ev:event="DOMActivate" nodeset="."/>
																			<xforms:label>
																				<span class="glyphicon glyphicon-remove"></span>
																			</xforms:label>
																		</xforms:trigger>
																	</td>
																</tr>
															</xforms:repeat>
														</tbody>
													</table>
												</xforms:group>
											</div>
										</div>
									</xforms:group>
									<div class="section">
										<h2>Semantic Local Type Declarations</h2>
										<span class="add">
											<xforms:trigger appearance="minimal">
												<xforms:label>
													<span class="glyphicon glyphicon-plus"></span>Local Type Declaration</xforms:label>
												<xforms:insert context="instance('config')/localTypeDeclarations" nodeset="./child::node()[last()]"
													origin="instance('localTypeDeclaration-template')" ev:event="DOMActivate"/>
											</xforms:trigger>
										</span>
										<xforms:repeat nodeset="instance('config')/localTypeDeclarations/localTypeDeclaration">
											<div class="subsection">
												<h3>Declaration</h3>
												<xforms:trigger appearance="minimal">
													<xforms:delete ev:event="DOMActivate" nodeset="."/>
													<xforms:label>
														<span class="glyphicon glyphicon-remove"></span>
													</xforms:label>
												</xforms:trigger>
												<!--<div class="trigger_container">
													<xforms:group ref=".[count(descriptiveNote) = 0]">
														<xforms:trigger appearance="minimal">
															<xforms:label>
																<span class="glyphicon glyphicon-plus"/>Descriptive Note</xforms:label>
															<xforms:insert context="." nodeset="./child::node()[last()]" origin="instance('descriptiveNote-template')" ev:event="DOMActivate"/>
														</xforms:trigger>
													</xforms:group>
												</div>-->
												<div>
													<xforms:input ref="abbreviation">
														<xforms:label>Prefix</xforms:label>
														<xforms:alert>Required; must be token</xforms:alert>
													</xforms:input>
												</div>
												<div>
													<xforms:input ref="citation/@href">
														<xforms:label>URI</xforms:label>
														<xforms:alert>Required; must be URI</xforms:alert>
														<xforms:action ev:event="xforms-value-changed">
															<xforms:var name="href" select="."/>
															<xforms:setvalue ev:event="xforms-value-changed" ref="parent::node()" value="$href"/>
														</xforms:action>
													</xforms:input>
												</div>
												<!--<xforms:group ref="descriptiveNote">														
													<xeac:descriptiveNote/>
												</xforms:group>-->
											</div>
										</xforms:repeat>
									</div>
								</div>
							</fr:tab>
							<fr:tab bind="advanced-tab">
								<fr:label>Advanced</fr:label>
								<div class="section">
									<h2>Solr URLs</h2>
									<p>
										<b>Only change these options if Orbeon is run on a separate server.</b>
									</p>
									<p>Changing these options to an inactive URL could break public coin display and web form functionality.</p>
									<div>
										<xforms:input ref="solr_published">
											<xforms:label>Published Documents</xforms:label>
											<xforms:alert>Required</xforms:alert>
										</xforms:input>
									</div>
									<div>
										<xforms:input ref="solr_all">
											<xforms:label>All Documents</xforms:label>
											<xforms:alert>Required</xforms:alert>
										</xforms:input>
									</div>
								</div>
							</fr:tab>
						</fr:tabview>
						<xxforms:dialog id="upload-ontology-dialog" appearance="full" level="modal" close="true" draggable="true" visible="false">
							<xforms:label>Upload Ontology</xforms:label>
							<div style="width:400px;">
								<xforms:upload ref="instance('file')">
									<xforms:filename ref="@filename"/>
									<xforms:mediatype ref="@mediatype"/>
									<xxforms:size ref="@size"/>
								</xforms:upload>
								<div style="margin:20px 0;">
									<fr:button>
										<xforms:label>Upload</xforms:label>
										<xforms:action ev:event="DOMActivate">
											<xxforms:hide dialog="upload-ontology-dialog"/>
											<xforms:send submission="upload-ontology"/>
											<!--get the temp file written to disk-->
											<xforms:action ev:event="xforms-submit-done">
												<xforms:setvalue ref="instance('load-rdf-config')/url" value="substring-before(instance('file'), '?')"/>
												<xforms:insert nodeset="instance('ontology')"
													origin="xxforms:call-xpl('oxf:/apps/xeac/xpl/xforms/load-rdf.xpl', 'file', instance('load-rdf-config'), 'data')"/>
												<!--<xforms:send submission="get-ontology"/>-->
												<!-- process ontology to extract namespaces -->
												<xforms:action ev:event="xforms-submit-done">
													<xforms:action
														xxforms:iterate="instance('ontology')/*[@rdf:about][rdf:type[@rdf:resource='http://www.w3.org/2002/07/owl#Ontology'] or name()='owl:Ontology']">
														<xforms:var name="about" select="data(context()/@rdf:about)"/>
														<xforms:insert context="instance('control-instance')" nodeset="./child::node()[last()]"
															origin="xforms:element('namespace', (xforms:attribute('prefix', ''), xforms:attribute('import', true()), $about))"
														/>
													</xforms:action>
													<xxforms:show dialog="prefixes-dialog"/>
												</xforms:action>
											</xforms:action>
										</xforms:action>
									</fr:button>
								</div>
							</div>
						</xxforms:dialog>
						<xxforms:dialog id="prefixes-dialog" appearance="full" level="modal" close="true" draggable="true" visible="false">
							<xforms:label>Select Prefixes</xforms:label>
							<p>The following ontology URIs were found within the RDF upload:</p>
							<table class="table">
								<thead>
									<th>Prefix</th>
									<th>URI</th>
									<th>Import</th>
								</thead>
								<tbody>
									<xforms:repeat nodeset="instance('control-instance')/namespace">
										<tr>
											<td>
												<xforms:input ref="@prefix">
													<xforms:alert>Required if the import box is checked; must be xs:ID.</xforms:alert>
												</xforms:input>
											</td>
											<td>
												<xforms:output ref="."/>
											</td>
											<td>
												<xforms:input ref="@import"/>
											</td>
										</tr>
									</xforms:repeat>
								</tbody>
							</table>
							<div style="margin:20px 0">
								<xforms:trigger>
									<xforms:label>Import</xforms:label>
									<xforms:action ev:event="DOMActivate">
										<xxforms:hide dialog="prefixes-dialog"/>
										<xforms:action xxforms:iterate="instance('control-instance')/namespace[@import=true() and @prefix castable as xs:ID]">
											<xforms:var name="uri" select="data(context()/text())"/>
											<xforms:var name="prefix" select="data(context()/@prefix)"/>
											<!-- insert relations extracted from RDF -->
											<xforms:action
												xxforms:iterate="instance('ontology')/*[contains(@rdf:about, $uri)][rdf:type/@rdf:resource='http://www.w3.org/1999/02/22-rdf-syntax-ns#Property' or rdf:type/@rdf:resource='http://www.w3.org/2002/07/owl#SymmetricProperty' or name()='rdf:Property' or name()='owl:SymmetricProperty' or name()='owl:ObjectProperty']">
												<xforms:var name="source" select="replace(@rdf:about, $uri, concat($prefix, ':'))"/>
												<!-- ignore properties which have already been imported -->
												<xforms:action if="not(instance('config')/relationSemantics/cpfRelations/relation/@from = $source)">
													<xforms:insert context="instance('config')/relationSemantics/cpfRelations" nodeset="child::node()[last()]"
														origin="instance('cpfRelation-template')"/>
													<!-- handle equivalent relationships -->
													<xforms:action
														if="rdf:type/@rdf:resource='http://www.w3.org/2002/07/owl#SymmetricProperty' or name()='owl:SymmetricProperty'">
														<xforms:setvalue ref="instance('config')/relationSemantics/cpfRelations/relation[last()]/@from"
															value="$source"/>
														<xforms:setvalue ref="instance('config')/relationSemantics/cpfRelations/relation[last()]/@to"
															value="$source"/>
													</xforms:action>
													<!-- handle inverse relationships -->
													<xforms:action
														if="rdf:type/@rdf:resource='http://www.w3.org/1999/02/22-rdf-syntax-ns#Property' or name()='rdf:Property' or name()='owl:ObjectProperty'">
														<!-- if owl:inverseOf exists -->
														<xforms:action
															if="string(context()/owl:inverseOf/@rdf:resource) or string(context()/owl:inverseOf/*/@rdf:about)">
															<xforms:var name="to"
																select="if (string(context()/owl:inverseOf/@rdf:resource)) then replace(context()/owl:inverseOf/@rdf:resource, $uri, concat($prefix, ':')) else replace(context()/owl:inverseOf/*/@rdf:about, $uri, concat($prefix, ':'))"/>
															<xforms:setvalue ref="instance('config')/relationSemantics/cpfRelations/relation[last()]/@from"
																value="$source"/>
															<xforms:setvalue ref="instance('config')/relationSemantics/cpfRelations/relation[last()]/@to"
																value="$to"/>
														</xforms:action>
														<!-- otherwise, insert the same relationship -->
														<xforms:action
															if="not(string(context()/owl:inverseOf/@rdf:resource) or string(context()/owl:inverseOf/*/@rdf:about))">
															<xforms:setvalue ref="instance('config')/relationSemantics/cpfRelations/relation[last()]/@from"
																value="$source"/>
															<xforms:setvalue ref="instance('config')/relationSemantics/cpfRelations/relation[last()]/@to"
																value="$source"/>
														</xforms:action>
													</xforms:action>
												</xforms:action>
											</xforms:action>

											<!-- insert localTypeDeclaration for the prefix and URI if it does not already exist -->
											<xforms:action
												if="not(instance('config')/localTypeDeclarations/localTypeDeclaration[abbreviation=$prefix and citation/@href=$uri])">
												<xforms:insert context="instance('config')/localTypeDeclarations" nodeset="./child::node()[last()]"
													origin="instance('localTypeDeclaration-template')"/>
												<xforms:setvalue ref="instance('config')/localTypeDeclarations/localTypeDeclaration[last()]/abbreviation"
													value="$prefix"/>
												<xforms:setvalue ref="instance('config')/localTypeDeclarations/localTypeDeclaration[last()]/citation"
													value="$uri"/>
												<xforms:setvalue ref="instance('config')/localTypeDeclarations/localTypeDeclaration[last()]/citation/@href"
													value="$uri"/>
											</xforms:action>
										</xforms:action>
									</xforms:action>
								</xforms:trigger>
								<xforms:trigger>
									<xforms:label>Cancel</xforms:label>
									<xxforms:hide dialog="prefixes-dialog" ev:event="DOMActivate"/>
								</xforms:trigger>
							</div>
						</xxforms:dialog>

						<!-- connect to SPARQL -->
						<xxforms:dialog id="sparql-dialog" appearance="full" level="modal" close="true" draggable="true" visible="false">
							<xforms:label>Connect to SPARQL Endpoint</xforms:label>
							<p style="width:600px;">Insert the URLs for SPARQL endpoint query and update services below. In the Apache Fuseki endpoint, for
								example, the Query web service is http://localhost:3030/ds/query, Graph Store is http://localhost:3030/ds/data and SPARQL/Update
								service is located at http://localhost:3030/ds/update</p>
							<xforms:group ref="instance('control-instance')">
								<xforms:group ref=".[sparql-connect=false() or sparql-success=false()]">
									<div>
										<xforms:input ref="sparql/query">
											<xforms:label>Query URL</xforms:label>
											<xforms:alert>Must conform to xs:anyURI</xforms:alert>
										</xforms:input>
									</div>
									<div>
										<xforms:input ref="sparql/store">
											<xforms:label>Graph Store URL</xforms:label>
											<xforms:alert>Must conform to xs:anyURI</xforms:alert>
										</xforms:input>
									</div>
									<div>
										<xforms:input ref="sparql/update">
											<xforms:label>Update URL</xforms:label>
											<xforms:alert>Must conform to xs:anyURI</xforms:alert>
										</xforms:input>
									</div>
									<xforms:trigger bind="sparql-connect">
										<xforms:label>Connect</xforms:label>
										<xforms:action ev:event="DOMActivate">
											<xforms:setvalue ref="instance('control-instance')/sparql-connect">true</xforms:setvalue>
											<!-- first query the sparql endpoint -->
											<xforms:send submission="query-sparql"/>
											<xforms:action ev:event="xforms-submit-done">
												<xforms:setvalue ref="instance('control-instance')/sparql-success">true</xforms:setvalue>
												<!-- then test posting and deleting from the update endpoint -->
												<xforms:insert context="instance('rdf')" origin="instance('rdf-test')/rdf:Description"/>
												<xforms:send submission="post-rdf"/>
												<xforms:action ev:event="xforms-submit-done">
													<!-- if the RDF test successfully posts, then delete the graph through SPARQL/Update -->
													<xforms:setvalue ref="instance('sparqlUpdate')"
														value="replace(instance('sparqlUpdate-template'), 'URI', 'http://example.org/')"/>
													<xforms:send submission="delete-graph"/>
												</xforms:action>
											</xforms:action>
										</xforms:action>
									</xforms:trigger>
								</xforms:group>
								<xforms:group ref=".[sparql-success=true()]">
									<div>
										<p class="bg-success">SPARQL endpoints found.</p>
										<div>
											<xforms:output ref="instance('control-instance')/sparql/query">
												<xforms:label>Query URL</xforms:label>
											</xforms:output>
										</div>
										<div>
											<xforms:output ref="instance('control-instance')/sparql/store">
												<xforms:label>Graph Store URL</xforms:label>
											</xforms:output>
										</div>
										<div>
											<xforms:output ref="instance('control-instance')/sparql/update">
												<xforms:label>Update URL</xforms:label>
											</xforms:output>
										</div>
										<xforms:trigger>
											<xforms:label>Confirm</xforms:label>
											<xforms:action ev:event="DOMActivate">
												<xforms:setvalue ref="instance('config')/sparql/query" value="instance('control-instance')/sparql/query"/>
												<xforms:setvalue ref="instance('config')/sparql/update" value="instance('control-instance')/sparql/update"/>
												<xforms:setvalue ref="instance('config')/sparql/store" value="instance('control-instance')/sparql/store"/>
												<xxforms:hide dialog="sparql-dialog"/>
												<xforms:dispatch target="publish-all" name="fr-show"/>
											</xforms:action>
										</xforms:trigger>
									</div>
								</xforms:group>
								<xforms:group ref=".[sparql-success=false() and sparql-connect=true()]">
									<div>
										<p class="bg-danger">Unable to query SPARQL endpoint.</p>
									</div>
								</xforms:group>
							</xforms:group>
						</xxforms:dialog>

						<!-- publish RDF -->
						<fr:alert-dialog id="publish-all">
							<fr:label>Publish RDF</fr:label>
							<fr:message>Do you want to post all published records into the SPARQL endpoint? It may take several minutes.</fr:message>
							<fr:negative-choice/>
							<fr:positive-choice>
								<xforms:action ev:event="DOMActivate">
									<xforms:setvalue ref="instance('eXist-xquery')/exist:text" value="instance('xqueries')/query[@id='publish-all']"/>
									<xforms:send submission="xquery-collection"/>
									<xforms:action ev:event="xforms-submit-done" xxforms:iterate="instance('xquery-result')/report/id">
										<xforms:var name="id" select="context()"/>
										<xforms:setvalue ref="instance('control-instance')/id" value="$id"/>
										<xforms:send submission="get-rdf"/>
									</xforms:action>
								</xforms:action>
							</fr:positive-choice>
						</fr:alert-dialog>

						<!--<fr:xforms-inspector id="orbeon-xforms-inspector"/>-->
					</div>
				</div>
			</div>
		</div>
	</body>

</html>
